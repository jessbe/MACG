{"version":3,"sources":["assets/vote.jpeg","components/phraseGen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PhraseGen","state","choose","path","a","size","Object","obj","keys","length","random","min","max","Math","floor","handleClick","data","_this","console","warn","startsWith","setState","_this$state","this","react_default","createElement","react","className","concat","onClick","Component","App","src","vote","alt","phraseGen_PhraseGen","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ukBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OCGnBC,6MACjBC,MAAQ,CACJC,OAAQ,UACRC,KAAM,OACNC,EAAG,OAEPC,KAAOC,OAAOD,KAAO,SAACE,GAClB,OACED,OAAOE,KAAKD,GAAKE,UAIvBC,OAAS,SAACC,EAAKC,GACX,OAAOC,KAAKC,MAAMD,KAAKH,UAAYE,EAAMD,GAAOA,MAGpDI,YAAc,WACV,IAAIb,EAASc,EAAKd,OAAQe,EAAKP,OAAO,EAAGO,EAAKZ,KAAKW,EAAKd,UACpDC,EAAOa,EAAKb,KAAMc,EAAKP,OAAO,EAAGO,EAAKZ,KAAKW,EAAKb,QACpDe,QAAQC,KAAKhB,GACb,IACIC,EADUD,EAAKiB,WAAW,KACZ,KAAO,IACzB,OACIH,EAAKI,SAAS,CACVnB,OAAQA,EACRC,KAAMA,EACNC,EAAGA,6EAIP,IAAAkB,EACsBC,KAAKtB,MAAxBC,EADHoB,EACGpB,OAAQE,EADXkB,EACWlB,EAAGD,EADdmB,EACcnB,KAClB,OACIqB,EAAApB,EAAAqB,cAACC,EAAA,SAAD,KACAF,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,UAAd,GAAAC,OACQ1B,EADR,KAAA0B,OACkBxB,EADlB,KAAAwB,OACuBzB,IAEvBqB,EAAApB,EAAAqB,cAAA,UAAQI,QAASN,KAAKR,YAAaY,UAAU,UAA7C,yBArC2BG,6BCgBxBC,MAZf,WACE,OACEP,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,OACbH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,SAAd,yCAGAH,EAAApB,EAAAqB,cAAA,OAAKO,IAAKC,IAAMC,IAAI,sBAAsBP,UAAU,UACpDH,EAAApB,EAAAqB,cAACU,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAApB,EAAAqB,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a709214.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vote.254c47d5.jpeg\";","import React, { Component, Fragment } from 'react'\nimport data from '../data.json'\n\nexport default class PhraseGen extends Component {     \n    state = {\n        choose: \"vote on\",\n        path: \"path\",\n        a: \"a\"\n    }\n    size = Object.size = (obj) => {\n        return ( \n          Object.keys(obj).length\n        )\n    }\n    \n    random = (min, max) => {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n\n    handleClick = () => {\n        let choose = data.choose[(this.random(0, this.size(data.choose)))]\n        let path = data.path[(this.random(0, this.size(data.path)))]\n        console.warn(path)\n        let isVowel = path.startsWith('a')\n        let a = isVowel ? 'an' : 'a'\n        return (\n            this.setState({\n                choose: choose,\n                path: path,\n                a: a \n            })\n        )\n    }\n    render(){\n        const {choose, a, path} = this.state\n        return(\n            <Fragment>\n            <h2 className='phrase'>\n                {`${choose} ${a} ${path}`}\n            </h2>\n            <button onClick={this.handleClick} className='button'>\n                team decision\n            </button>\n            </Fragment>\n\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport PhraseGen from './components/phraseGen'\nimport vote from './assets/vote.jpeg'\n\n//colors chosen based off https://redbooth.com/hub/colors-unexpected-productivity-boost/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Magical Acceptance Criteria Generator\n      </h1>\n      <img src={vote} alt='just decide already' className='image'/>\n      <PhraseGen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}